{"version":3,"file":"static/js/877.da403ea8.chunk.js","mappings":"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","sources":["styles/CustomerConsoleStyles.js","styles/TransferScreenStyles.js","context/TransferProvider.js","styles/TransferInitiatorStyles.js","components/TransferInitiator.js","styles/TransferSuccessScreenStyles.js","components/TransferSuccessScreen.js","components/TransferScreen.js","context/StatementProvider.js","styles/AccountStatementStyles.js","components/AccountStatement.js","context/CustomerConsoleProvider.js","components/CustomerConsole.js"],"sourcesContent":["import { makeStyles } from '@mui/styles';\r\n// import handshake from '../../assets/handshake.svg';\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n  ({\r\n    logoContainer: {\r\n        // backgroundColor: 'red'\r\n    },\r\n\r\n    logo: {\r\n        width: '3rem',\r\n        padding: '.5rem',\r\n    },\r\n      \r\n    titleBar: {\r\n        background: 'linear-gradient(45deg, violet, blue, orange)',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: '0 .5rem',\r\n        height: '10vh',\r\n        // justifyContent: 'center',\r\n    },\r\n\r\n    banner: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        cursor: 'pointer',\r\n        // width: '100%'\r\n    },\r\n        \r\n    title: {\r\n        fontSize: '1.5rem',\r\n        padding: '.5rem',\r\n        color: 'aliceblue',\r\n    },\r\n\r\n    avatar: {\r\n        marginLeft: 'auto',\r\n    },\r\n\r\n    popperBox: {\r\n        backgroundColor: '#666263',\r\n        padding: '.3rem',\r\n        border: '.2vw solid black',\r\n        borderRadius: '1vh',\r\n        color: 'aliceblue',\r\n    },\r\n\r\n    username: {\r\n        textAlign: 'center'\r\n    },\r\n\r\n    // logoutButton: {\r\n    //     backgroundColor: 'black'\r\n    // },\r\n\r\n    body: {\r\n        backgroundColor: '#2a2b2a',\r\n        height: '90vh',\r\n        padding: '1rem',\r\n        overflowY: 'auto',\r\n    },\r\n\r\n    optionButton: {\r\n        color: 'white',\r\n        fontSize: '1.5rem',\r\n        fontWeight: 'bolder',\r\n        textAlign: 'center',\r\n        backgroundColor: 'black',\r\n        backgroundSize: 'contain',\r\n        height: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        borderRadius: '2vw',\r\n        border: '.5px solid white',\r\n        margin: '.5rem',\r\n    },\r\n  }),\r\n);\r\n\r\nexport default useStyles;","import { makeStyles } from \"@mui/styles\";\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    \r\n}));\r\n\r\nexport default useStyles;","import { createContext, useState } from \"react\";\r\n\r\nconst TransferContext = createContext({});\r\n\r\nexport const TransferProvider = ({children})=>{\r\n    const [transfer, setTransfer] = useState({});\r\n\r\n    return(\r\n        <TransferContext.Provider value={{transfer, setTransfer}}>\r\n            {children}\r\n        </TransferContext.Provider>\r\n    )\r\n}\r\n\r\nexport default TransferContext;","import { makeStyles } from \"@mui/styles\"\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    userInfo: {\r\n        backgroundImage: 'linear-gradient(darkslategrey, black, darkslategrey)',\r\n        color: 'white',\r\n        borderRadius: '3rem',\r\n        height: '100%',\r\n        margin: '1rem',\r\n        textAlign: 'center',\r\n    },\r\n\r\n    heading: {\r\n        fontWeight: 'bolder',\r\n        fontSize: '1.7rem',\r\n        color: 'lightslategrey',\r\n    },\r\n\r\n    avatarContainer: {\r\n        display: 'flex',\r\n        aspectRatio: '1 / 1',\r\n        height: '100%',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n\r\n    details: {\r\n        // textAlign: 'center',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        margin: '.5rem',\r\n        fontWeight: 'bold',\r\n        fontSize: '1.5rem',\r\n    },\r\n\r\n    transferFormContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        height: '100%',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        // backgroundColor: 'red',\r\n    },\r\n\r\n    transferForm: {\r\n        // height: '50%',\r\n        // margin: 'auto auto',\r\n        // transform: 'translateY(50%)',\r\n        backgroundColor: 'black',\r\n        borderRadius: '1rem',\r\n        padding: '1rem'\r\n    },\r\n\r\n    entry: {\r\n        display: 'flex',\r\n        margin: '.5rem 0'\r\n    },\r\n\r\n    label: {\r\n        backgroundColor: 'beige',\r\n        margin: '.5% 2%',\r\n        padding: '.5rem',\r\n        borderRadius: '1rem',\r\n        width: '15rem',\r\n        textAlign: 'center',\r\n        fontWeight: 'bolder'\r\n    },\r\n\r\n    input: {\r\n        backgroundColor: 'white',\r\n        padding: '.5rem',\r\n        margin: '.5% 2%',\r\n        width: '100%',\r\n        borderRadius: '1rem',\r\n        fontWeight: 'bold',\r\n        textAlign: 'center',\r\n\r\n        '&::-webkit-outer-spin-button':{\r\n            WebkitAppearance: 'none'\r\n        },\r\n\r\n        '&::-webkit-inner-spin-button':{\r\n            WebkitAppearance: 'none'\r\n        },\r\n\r\n        MozAppearance: 'textfield',\r\n    },\r\n}));\r\n\r\nexport default useStyles;","import axios from \"api/axios\";\r\nimport AuthContext from \"context/AuthProvider\";\r\nimport LoadingContext from \"context/LoadingProvider\";\r\nimport { useState, useContext } from \"react\";\r\nimport TransferContext from \"context/TransferProvider\";\r\nimport useStyles from \"styles/TransferInitiatorStyles\";\r\nimport { Grid, Avatar, Button } from \"@mui/material\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst TRANSFER_URL = '/transfers';\r\nfunction TransferInitiator(){\r\n    const classes = useStyles();\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const { auth, setAuth } = useContext(AuthContext);\r\n    const { transfer, setTransfer } = useContext(TransferContext);\r\n    const { loading, setLoading, loadingColor, setLoadingColor } = useContext(LoadingContext);\r\n    \r\n    const [ toAccountId, setToAccountId ] = useState('');\r\n    const [ amountRupees, setAmountRupees ] = useState('');\r\n    const amountPaise = amountRupees ? (amountRupees * 100) : '';\r\n    // const [ loading, setLoading ] = useState(false);\r\n\r\n    const handleAccountIdUpdate = (e)=>{\r\n        const newId = parseInt(e.target.value) > 0 ? e.target.value : '';\r\n        setToAccountId(newId);\r\n    }\r\n    const handleAmountRupeesUpdate = (e)=>{\r\n        const newAmount = parseInt(e.target.value) > 0 ? e.target.value : '';\r\n        setAmountRupees(newAmount);\r\n    }\r\n\r\n    const handleTransfer = async(e)=>{\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        try{\r\n            const token = auth?.token;\r\n            const response = await axios.post(\r\n                TRANSFER_URL,\r\n                JSON.stringify({toAccountId, amountPaise}),\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: \"Bearer \"+token,\r\n                    },\r\n                }    \r\n            );\r\n            const transferData = response?.data;\r\n            setTransfer(transferData);\r\n            // console.log(transferData);\r\n            // alert(`INR ${amountRupees} transferred to account no. ${toAccountId}`);\r\n            // let newBal = auth.balancePaise - amountPaise;\r\n            // setAuth({...auth, balancePaise: newBal });\r\n            setLoading(false);\r\n            navigate('success', {replace: true})\r\n        }catch(err){\r\n            setLoading(false);\r\n            // console.log(err);\r\n\r\n            if(!err?.response){\r\n                alert('No server response');\r\n            }\r\n            else{\r\n                alert(err?.response?.data?.message);\r\n            }\r\n        }\r\n    }\r\n\r\n    const UserInfo = (props)=>{\r\n        const name = props.name ? props.name : 'Anonymous';\r\n        const accountNo = props.accountNo ? props.accountNo : '...';\r\n\r\n        return(\r\n            <div className={classes.userInfo}>\r\n                <span className={classes.heading}>\r\n                    {props.heading}\r\n                </span>\r\n                <Grid container>\r\n                    <Grid item xs={4} md={12}>\r\n                        <div className={classes.avatarContainer}>\r\n                            <Avatar\r\n                                sx={{\r\n                                    bgcolor: props.avatarBgcolor,\r\n                                    color: props.avatarColor,\r\n                                    width: '50%',\r\n                                    height: '50%',\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={8} md={12}>\r\n                        <div className={classes.details}>\r\n                            <div className={classes.username}>\r\n                                {name}\r\n                            </div>\r\n                            <div className={classes.accountNo}>\r\n                                Account no.:&nbsp;\r\n                                {accountNo}\r\n                            </div>\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const Sender = ()=>{\r\n        const { id, name } = auth;\r\n\r\n        return(\r\n            <div className={classes.sender}>\r\n                <UserInfo heading='FROM' name={name} accountNo={id} avatarBgcolor='khaki' avatarColor='lightcoral' />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const Receiver = ()=>{\r\n        return(\r\n            <div className={classes.receiver}>\r\n                <UserInfo heading='TO' accountNo={toAccountId} avatarBgcolor='indigo' avatarColor='green' />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // const TransferForm = ()=>{\r\n    //     return(\r\n            \r\n    //     );\r\n    // }\r\n\r\n    return ( \r\n        <div className={classes.root}>\r\n            {/* <NavLink to='/customerConsole'>\r\n                Transfer Screen\r\n            </NavLink> */}\r\n            {/* <LoadingOverlay show={loading} /> */}\r\n            <Grid container>\r\n                <Grid item xs={12} md={4}>\r\n                    <Sender />\r\n                </Grid>\r\n                <Grid item xs={12} md={4}>        \r\n                <div className={classes.transferFormContainer}>\r\n                    <div className={classes.transferForm}>\r\n                        <div className={classes.entry}>\r\n                            <label className={classes.label}>\r\n                                Account no.\r\n                            </label>\r\n                            <input\r\n                            id='account_no'\r\n                            type = 'number' \r\n                            className={classes.input}\r\n                            autoComplete='off'\r\n                            onChange={handleAccountIdUpdate}\r\n                            value={toAccountId}\r\n                            />\r\n                        </div>\r\n                        <div className={classes.entry}>\r\n                            <label className={classes.label}>\r\n                                Amount in ₹\r\n                                {/* <FontAwesomeIcon icon={faInr} size='1x' /> */}\r\n                            </label>\r\n                            <input\r\n                            id='amount'\r\n                            type = 'number' \r\n                            className={classes.input}\r\n                            autoComplete='off'\r\n                            onChange={handleAmountRupeesUpdate}\r\n                            value={amountRupees}\r\n                            />\r\n                        </div>\r\n                        <Button\r\n                        className={classes.submitButton}\r\n                        sx={{\r\n                            color: 'white', \r\n                            backgroundColor: '#4b484c',\r\n                            width: '100%',\r\n                            margin: '1rem 0'\r\n                            }}\r\n                        onClick={handleTransfer}\r\n                        disabled={!toAccountId.length || !amountRupees.length}\r\n                        >\r\n                            Initiate Transfer\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                </Grid>\r\n                <Grid item xs={12} md={4}>\r\n                    <Receiver />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TransferInitiator;","import { makeStyles } from \"@mui/styles\";\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    root:{\r\n        // display: 'flex',\r\n        // flexDirection: 'column',\r\n        color: 'white',\r\n        textAlign: 'center',\r\n        fontSize: '1.5rem',\r\n        // overflowY: 'auto',\r\n        // height: '100%',\r\n    },\r\n    heading:{\r\n        backgroundColor: 'black',\r\n        color: 'green',\r\n        fontSize: '2rem',\r\n        // border: '.1rem solid grey',\r\n        borderRadius: '1rem',\r\n        boxShadow: '0 0 .5rem grey',\r\n    },\r\n    amount: {\r\n        color: 'royalblue',\r\n        fontSize: '3rem',\r\n    },\r\n    detailsHeading:{\r\n        backgroundColor: 'dimgrey',\r\n        fontWeight: 'bold',\r\n        border: '.2rem solid silver',\r\n    },\r\n    label:{\r\n        backgroundColor: 'darkslategrey',\r\n        padding: '1rem',\r\n        border: '.05rem solid black',\r\n    },\r\n    value:{\r\n        backgroundColor: 'grey',\r\n        padding: '1rem',\r\n        border: '.05rem solid black',\r\n    },\r\n    // okButton:{\r\n    //     color: 'greenyellow',\r\n    //     backgroundColor: 'green',\r\n    //     margin: '.5rem 0',\r\n    // },\r\n}));\r\n\r\nexport default useStyles;","import useStyles from \"styles/TransferSuccessScreenStyles\";\r\nimport { Grid, Button } from \"@mui/material\";\r\nimport { useContext } from \"react\";\r\nimport TransferContext from \"context/TransferProvider\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction TransferSuccessScreen() {\r\n    const classes = useStyles();\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const { transfer, setTransfer } = useContext(TransferContext);\r\n    const { id, fromAccount, toAccount, amountPaise, transferredAt } = transfer;\r\n    const amountRupees = amountPaise / 100;\r\n    const transferDate = new Date(transferredAt);\r\n\r\n    const handleOk = (e)=>{\r\n        e.preventDefault();\r\n        navigate('customerConsole/transfer', {replace: true});\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <div className={classes.heading}>\r\n                        Transfer Successful!\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <div className={classes.amount}>\r\n                        ₹{amountRupees}\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <div className={classes.detailsHeading}>\r\n                        Details\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Grid container\r\n                    style={{\r\n                        maxHeight: '40vh',\r\n                        overflowY: 'auto',\r\n                        border: '.2rem solid black'\r\n                    }}\r\n                    >\r\n                        <Grid item xs={12} md={4} className={classes.label}>\r\n                            From Account No.\r\n                        </Grid>\r\n                        <Grid item xs={12} md={8} className={classes.value}>\r\n                            {fromAccount}\r\n                        </Grid>\r\n                        <Grid item xs={12} md={4} className={classes.label}>\r\n                            To Account No.\r\n                        </Grid>\r\n                        <Grid item xs={12} md={8} className={classes.value}>\r\n                            {toAccount}\r\n                        </Grid>\r\n                        <Grid item xs={12} md={4} className={classes.label}>\r\n                            Transaction Id\r\n                        </Grid>\r\n                        <Grid item xs={12} md={8} className={classes.value}>\r\n                            {id}\r\n                        </Grid>\r\n                        <Grid item xs={12} md={4} className={classes.label}>\r\n                            Time of Transaction\r\n                        </Grid>\r\n                        <Grid item xs={12} md={8} className={classes.value}>\r\n                            {transferDate.toString()}\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Button className={classes.okButton} onClick={handleOk} sx={{\r\n                            color: 'greenyellow',\r\n                            backgroundColor: 'green',\r\n                            margin: '.5rem 0',\r\n                            border: '.1rem solid yellowgreen'\r\n                        }}>\r\n                            OK\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TransferSuccessScreen;","import LoadingContext from \"context/LoadingProvider\";\r\nimport { memo, useContext, useEffect } from \"react\";\r\nimport { Route, Routes } from \"react-router-dom\";\r\nimport useStyles from \"styles/TransferScreenStyles\";\r\n// import LoadingOverlay from \"./LoadingOverlay\";\r\nimport TransferInitiator from \"components/TransferInitiator\";\r\nimport TransferSuccessScreen from \"components/TransferSuccessScreen\";\r\n\r\nconst TransferScreen = memo(()=>{\r\n    const { loading, setLoading, loadingColor, setLoadingColor } = useContext(LoadingContext);\r\n\r\n    useEffect(\r\n        ()=>{\r\n            setLoadingColor('green');\r\n            // setLoading(false);\r\n        },\r\n        []\r\n    );\r\n\r\n    const classes = useStyles();\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n            <Routes>\r\n                <Route path='*' element={<TransferInitiator setLoading={setLoading} />} />\r\n                <Route path='success' element={<TransferSuccessScreen />} />\r\n            </Routes>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default TransferScreen;","import { createContext, useState } from \"react\";\r\n\r\nconst StatementContext = createContext({});\r\n\r\nexport const StatementProvider = ({children})=>{\r\n    const [statement, setStatement] = useState({});\r\n\r\n    return(\r\n        <StatementContext.Provider value={{statement, setStatement}}>\r\n            {children}\r\n        </StatementContext.Provider>\r\n    )\r\n}\r\n\r\nexport default StatementContext;","import { makeStyles } from \"@mui/styles\";\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    header: {\r\n        color: 'black',\r\n        backgroundColor: 'grey',\r\n        fontSize: '1.5rem',\r\n        fontWeight: 'bolder',\r\n    },\r\n    heading: {\r\n        textAlign: 'center',\r\n        border: '.1rem solid black',\r\n    },\r\n    gridContainer: {\r\n        height: '65vh',\r\n        // backgroundColor: 'black',\r\n        // color: 'white',\r\n        '& .MuiButtonBase-root':{\r\n            color: 'white'\r\n        },\r\n        '& .MuiTablePagination-toolbar':{\r\n            flexWrap: 'wrap',\r\n            justifyContent: 'flex-end',\r\n        }\r\n    },\r\n\r\n    typeIconContainer: {\r\n        height: '100%',\r\n    },\r\n\r\n    typeIcon: {\r\n        fit: 'contain',\r\n        height: '100%',\r\n    },\r\n\r\n    refreshButtonContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n    },\r\n}));\r\n\r\nexport default useStyles;","import AuthContext from \"context/AuthProvider\";\r\nimport StatementContext from \"context/StatementProvider\";\r\nimport { useContext, useEffect } from \"react\";\r\nimport useStyles from \"styles/AccountStatementStyles\";\r\nimport { DataGrid, gridPageCountSelector, gridPageSelector, gridPageSizeSelector, gridRowCountSelector, useGridApiContext, useGridSelector } from '@mui/x-data-grid';\r\nimport { Button, Grid, Pagination, PaginationItem, TablePagination, Tooltip } from \"@mui/material\";\r\nimport { depositIcon, inboundIcon, outboundIcon, withdrawalIcon } from \"assets/assets\";\r\nimport axios from \"api/axios\";\r\nimport LoadingContext from \"context/LoadingProvider\";\r\n\r\nconst GET_STATEMENT_URL = '/accounts/statement';\r\n\r\nfunction AccountStatement() {\r\n    const classes = useStyles();\r\n\r\n    const { auth, setAuth } = useContext(AuthContext);\r\n    const { setLoading } = useContext(LoadingContext);\r\n    const { statement, setStatement } = useContext(StatementContext);\r\n\r\n    const rows = statement?.rows?.content ?? [];\r\n\r\n    const columns = [\r\n        {\r\n            field: 'type',\r\n            headerName: 'Type',\r\n            headerAlign: 'center',\r\n            align: 'center',\r\n            flex: 1,\r\n            valueGetter: (params)=>{\r\n                const {withdrawalAmount, description} = params.row;\r\n                if(withdrawalAmount){\r\n                    if(description.startsWith('To Account')){\r\n                        return 'Outbound Transfer';\r\n                    }\r\n                    else{\r\n                        return 'Withdrawal';\r\n                    }\r\n                }\r\n                else{\r\n                    if(description.startsWith('From Account')){\r\n                        return 'Inbound Transfer';\r\n                    }\r\n                    else{\r\n                        return 'Deposit';\r\n                    }\r\n                }\r\n            },\r\n            renderCell: (params)=>{\r\n                const getIcon = ()=>{\r\n                    switch(params.value){\r\n                        case 'Withdrawal':\r\n                            return(\r\n                                <img src={withdrawalIcon} alt='W' className={classes.typeIcon} />\r\n                            );\r\n                            break;\r\n                        case 'Deposit':\r\n                            return(\r\n                                <img src={depositIcon} alt='D' className={classes.typeIcon} />\r\n                            );\r\n                            break;\r\n                        case 'Inbound Transfer':\r\n                            return(\r\n                                <img src={inboundIcon} alt='I' className={classes.typeIcon} />\r\n                            );\r\n                            break;\r\n                        case 'Outbound Transfer':\r\n                            return(\r\n                                <img src={outboundIcon} alt='O' className={classes.typeIcon} />\r\n                            );\r\n                            break;\r\n                        default:\r\n                            return(\r\n                                <>\r\n                                    Unknown\r\n                                </>\r\n                            )\r\n                    }\r\n                }\r\n                return(\r\n                    <Tooltip title={params.value} enterTouchDelay={0}>\r\n                        <div className={classes.typeIconContainer}>\r\n                            {\r\n                                getIcon()\r\n                            }\r\n                        </div>\r\n                    </Tooltip>\r\n                )\r\n            },\r\n        },\r\n        {\r\n            field: 'amount',\r\n            headerName: 'Amount',\r\n            headerAlign: 'center',\r\n            align: 'center',\r\n            valueGetter: (params)=>{\r\n                const {withdrawalAmount, depositAmount} = params.row;\r\n                return `₹  ${(withdrawalAmount ?? depositAmount) / 100}`;\r\n            },\r\n            flex: 4,\r\n            renderCell: (params)=>{\r\n                return(\r\n                    <p style={{\r\n                        overflowX: 'auto'\r\n                    }}>\r\n                        {params.value}\r\n                    </p>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            field: 'date',\r\n            headerName: 'Date',\r\n            flex: 2,\r\n            headerAlign: 'center',\r\n            align: 'center',\r\n            renderCell: (params)=>{\r\n                return(\r\n                    <p style={{\r\n                        overflowX: 'auto'\r\n                    }}>\r\n                        {params.value}\r\n                    </p>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            field: 'description',\r\n            headerName: 'Description',\r\n            flex: 3,\r\n            headerAlign: 'center',\r\n            align: 'center',\r\n            renderCell: (params)=>{\r\n                return(\r\n                    <p style={{\r\n                        overflowX: 'auto'\r\n                    }}>\r\n                        {params.value}\r\n                    </p>\r\n                )\r\n            }\r\n        },\r\n    ]\r\n\r\n    // useEffect(()=>{\r\n    //     console.log(rows);\r\n    // },[statement]);\r\n\r\n    const handleRefresh = async(e)=>{\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        try{\r\n            const token = auth?.token;\r\n            const response = await axios.get(\r\n                GET_STATEMENT_URL,\r\n                {\r\n                    headers: {\r\n                        Authorization: \"Bearer \"+token,\r\n                    }\r\n                }\r\n            );\r\n            setLoading(false);\r\n            setStatement(response?.data);\r\n        }catch(err){\r\n            if(!err?.response){\r\n                alert('No server response');\r\n            }else{\r\n                alert(err?.response?.data?.message ?? 'An error occured.');\r\n            }\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    const CustomPagination = ()=>{\r\n        const apiRef = useGridApiContext();\r\n        const page = useGridSelector(apiRef, gridPageSelector);\r\n        // const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n        const count = useGridSelector(apiRef, gridRowCountSelector);\r\n        const rowsPerPage = useGridSelector(apiRef, gridPageSizeSelector);\r\n\r\n        return (\r\n        <TablePagination\r\n        component=\"div\"\r\n        variant=\"outlined\"\r\n        shape=\"rounded\"\r\n        page={page}\r\n        count={count}\r\n        rowsPerPage={rowsPerPage}\r\n        rowsPerPageOptions={[10, 25, 50, 100]}\r\n        labelRowsPerPage={<span>Records Per Page:</span>}\r\n        onRowsPerPageChange={\r\n            (event)=>{\r\n                apiRef.current.setPageSize(event.target.value);\r\n                apiRef.current.setPage(0);\r\n            }\r\n        }\r\n        onPageChange={\r\n            (event, newPage) =>{\r\n                apiRef.current.setPage(newPage);\r\n            }\r\n        }\r\n        showFirstButton={true}\r\n        showLastButton={true}\r\n        sx={{\r\n            color: 'white',\r\n        }}\r\n        />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={classes.header}>\r\n                <Grid container>\r\n                    <Grid item xs={12} md={6}>\r\n                        <div className={classes.heading}>\r\n                            {auth?.name}[#{statement?.accountId}]\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <div className={classes.heading}>\r\n                            Balance: ₹{statement?.balancePaise / 100}\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n            <div className={classes.gridContainer}>\r\n                <DataGrid\r\n                rows={rows}\r\n                columns={columns}\r\n                disableRowSelectionOnClick\r\n                initialState={{\r\n                    pagination: {\r\n                        paginationModel: { pageSize: 10, page: 0 },\r\n                    },\r\n                }}\r\n                sx={{\r\n                    color: 'white',\r\n                    backgroundColor: 'darkslategrey',\r\n                    fontWeight: 'bolder',\r\n                    fontSize: '1.2rem',\r\n                }}\r\n                components={{\r\n                    Pagination: CustomPagination,\r\n                }}\r\n                />\r\n            </div>\r\n            <div className={classes.refreshButtonContainer}>\r\n                <Button\r\n                    onClick={handleRefresh}\r\n                    sx={{\r\n                        color: 'greenyellow',\r\n                        backgroundColor: 'green',\r\n                        margin: '.5rem 0',\r\n                        border: '.1rem solid yellowgreen'\r\n                    }}\r\n                >\r\n                    Refresh\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AccountStatement;","import { combineComponents } from 'utils/combineComponents';\r\nimport { StatementProvider } from 'context/StatementProvider';\r\nimport { TransferProvider } from 'context/TransferProvider';\r\nconst providers = [\r\n    TransferProvider,\r\n    StatementProvider,\r\n]\r\nconst CustomerConsoleProvider = combineComponents(...providers);\r\n\r\nexport default CustomerConsoleProvider;","import { Grid, Avatar, Popper, IconButton , Box, Button } from '@mui/material';\r\nimport { useContext, useEffect, useRef, useState, useMemo } from 'react';\r\nimport { logo } from 'assets/assets';\r\nimport { transferIcon } from 'assets/assets';\r\nimport { accountStatementIcon } from 'assets/assets';\r\nimport useStyles from 'styles/CustomerConsoleStyles';\r\nimport { NavLink, Routes, Route, useNavigate } from 'react-router-dom';\r\nimport AuthContext from 'context/AuthProvider';\r\nimport TransferScreen from './TransferScreen';\r\nimport axios from 'api/axios';\r\nimport AccountStatement from 'components/AccountStatement';\r\nimport CustomerConsoleProvider from 'context/CustomerConsoleProvider';\r\nimport LoadingContext from 'context/LoadingProvider';\r\nimport StatementContext from 'context/StatementProvider';\r\n\r\nconst GET_ACCOUNT_URL = '/accounts/detail';\r\nconst GET_STATEMENT_URL = '/accounts/statement';\r\n\r\nfunction CustomerConsole()\r\n{\r\n    const classes = useStyles();\r\n    const { auth, setAuth } = useContext(AuthContext);\r\n    const navigate = useNavigate();\r\n    const { loading, setLoading, loadingColor, setLoadingColor } = useContext(LoadingContext);\r\n\r\n    const handleBannerClick = ()=>{\r\n        navigate('/customerConsole', {replace: true});\r\n    }\r\n\r\n    const Banner = useMemo(()=>{\r\n        return(\r\n            <div className={classes.banner} onClick={handleBannerClick}>\r\n                <div className={classes.logoContainer}>\r\n                    <img src={logo} alt='online_bank' className={classes.logo} />\r\n                </div>\r\n\r\n                <div className={classes.title}>\r\n                    Online Bank\r\n                </div>\r\n            </div>\r\n        )\r\n    },[]);\r\n\r\n    useEffect(()=>{\r\n        // console.log(auth?.token)\r\n        if(! auth?.token){\r\n            if(auth?.admin){\r\n                navigate('/adminConsole', {replace: true});\r\n            }\r\n            navigate('/login', {replace: true});\r\n        }\r\n    },[auth]);\r\n\r\n    const TitleBar = ()=>{\r\n        const {name} = auth;\r\n        const [balancePaise, setBalancePaise] = useState(auth?.balancePaise);\r\n        const user = (name) ? name : 'Loading...';\r\n        const balance = (typeof(balancePaise) === 'number') ? (\r\n            <>\r\n                {/* <div> */}\r\n                Balance:&nbsp;\r\n                {/* </div> */}\r\n                {/* <FontAwesomeIcon icon={faInr} size='1x' /> */}\r\n                {/* <div> */}\r\n                ₹{balancePaise / 100}\r\n                {/* </div> */}\r\n            </>\r\n        ):(\r\n            'Loading...'\r\n        );\r\n        const [popperAnchor, setPopperAnchor] = useState(null);\r\n        const popperOpen = Boolean(popperAnchor);\r\n        const popperId = popperOpen ? 'avatarPopper' : undefined;\r\n\r\n        const avatarRef = useRef(null);\r\n        const popperRef = useRef(null);\r\n\r\n        useEffect(()=>{\r\n            const handleClickOutside = (event) => {\r\n                if (avatarRef.current && !avatarRef.current.contains(event.target) && popperRef.current && !popperRef.current.contains(event.target)) {\r\n                    setPopperAnchor(null);\r\n                }\r\n                };\r\n                    document.addEventListener('click', handleClickOutside, true);\r\n                return () => {\r\n                    document.removeEventListener('click', handleClickOutside, true);\r\n                };\r\n        },[]);\r\n\r\n        \r\n\r\n        const handleAvatarClick = async(e)=>{\r\n            // console.log('enter/leave');\r\n            const {token} = auth;\r\n            setPopperAnchor(popperAnchor ? null : e.currentTarget);\r\n            const response = await axios.get(\r\n                GET_ACCOUNT_URL,\r\n                {\r\n                    headers: {\r\n                        Authorization: \"Bearer \"+token,\r\n                    }\r\n                }\r\n            )\r\n            const userdata = response?.data;\r\n            // name = userdata?.name;\r\n            // balancePaise = userdata?.balancePaise;\r\n            setBalancePaise(userdata?.balancePaise);\r\n        }\r\n\r\n        const handleLogout = ()=>{\r\n            // console.log('user logged out');\r\n            setAuth({});\r\n        }\r\n\r\n        return ( \r\n            <div className={classes.titleBar}>\r\n                {/* <Banner /> */}\r\n                {Banner}\r\n\r\n                <div className={classes.avatar}>\r\n                    <IconButton\r\n                        onClick={handleAvatarClick}\r\n                        ref={avatarRef}\r\n                    >\r\n                        <Avatar \r\n                            sx={{ bgcolor: 'black' }}\r\n                        />\r\n                    </IconButton>\r\n                    <Popper\r\n                        id={popperId}\r\n                        open={popperOpen}\r\n                        anchorEl={popperAnchor}\r\n                        ref={popperRef}\r\n                    >\r\n                        <Box\r\n                            className = {classes.popperBox}\r\n                        >\r\n                            <section className={classes.username}>\r\n                                {user}\r\n                            </section>\r\n                            <section className={classes.balance}>\r\n                                {balance}\r\n                            </section>\r\n                            <Button\r\n                                className={classes.logoutButton}\r\n                                onClick={handleLogout}\r\n                                sx={{\r\n                                    color:'red',\r\n                                    width: '100%',\r\n                                    backgroundColor: 'black',\r\n                                }}\r\n                            >\r\n                                Log Out\r\n                            </Button>\r\n                        </Box>\r\n                    </Popper>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    function Body() {\r\n        const { statement, setStatement } = useContext(StatementContext);\r\n        const handleStatementFetch = async(e)=>{\r\n            // console.log('click')\r\n            // e.preventDefault();\r\n            setLoading(true);\r\n            setLoadingColor('pink');\r\n            try{\r\n                const token = auth?.token;\r\n                const response = await axios.get(\r\n                    GET_STATEMENT_URL,\r\n                    {\r\n                        headers: {\r\n                            Authorization: \"Bearer \"+token,\r\n                        }\r\n                    }\r\n                );\r\n                setLoading(false);\r\n                setStatement(response?.data);\r\n                navigate('statement', {replace:true});\r\n            }catch(err){\r\n                if(!err?.response){\r\n                    alert('No server response');\r\n                }else{\r\n                    alert(err?.response?.data?.message ?? 'An error occured.');\r\n                }\r\n                navigate('/customerConsole', {replace:true});\r\n                setLoading(false);\r\n            }\r\n        }\r\n        const OptionButton = (props)=>{\r\n            // const icon = useMemo(()=>(`url(${props.icon})`),[]);\r\n            const icon = `url(${props.icon})`;\r\n            return(\r\n                <NavLink to={props.route}\r\n                    style={{\r\n                        textDecoration: 'none',\r\n                        color: 'white',\r\n                        width: '100%',\r\n                        display: 'block',\r\n                        aspectRatio: '1 / 1',\r\n                    }}\r\n                    replace\r\n                >\r\n                    <div style={{\r\n                        backgroundImage: icon,\r\n                        backgroundSize: 'contain',\r\n                        backgroundRepeat: 'no-repeat',\r\n                    }} \r\n                    className={classes.optionButton}\r\n                    onClick={props.onClick}\r\n                    id = {props.id}\r\n                    >   \r\n                            {props.name}\r\n                    </div>\r\n                </NavLink>\r\n            )\r\n        }\r\n\r\n        const Options = ()=>{\r\n            return(\r\n                <div className={classes.options}>\r\n                    <Grid container>\r\n                        <Grid item xs={6} md={2}>\r\n                            <OptionButton name='Money Transfer' icon={transferIcon} id='transferButton' route='transfer'/>\r\n                        </Grid>\r\n                        <Grid item xs={6} md={2}>\r\n                            <OptionButton name='Account Statement' icon={accountStatementIcon} id='accountStatementButton' route='statement' onClick={handleStatementFetch} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className={classes.body}>\r\n                <Routes>\r\n                    <Route path='*' element={<Options />} />\r\n                    <Route path='transfer/*' element={<TransferScreen />} />\r\n                    <Route path='statement/*' element={<AccountStatement />} />\r\n                </Routes>\r\n            </div> \r\n        );\r\n    }\r\n\r\n    return (\r\n        <CustomerConsoleProvider>\r\n            <div className={classes.root}>\r\n                {/* <LoadingOverlay show={loading} /> */}\r\n                <Grid container>\r\n                    <Grid item xs={12}>\r\n                        <TitleBar />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Body />\r\n                    </Grid>\r\n                </Grid>\r\n            </div> \r\n        </CustomerConsoleProvider>\r\n            \r\n    );\r\n}\r\n\r\nexport default CustomerConsole;"],"names":["makeStyles","theme","logoContainer","logo","width","padding","titleBar","background","display","alignItems","height","banner","cursor","title","fontSize","color","avatar","marginLeft","popperBox","backgroundColor","border","borderRadius","username","textAlign","body","overflowY","optionButton","fontWeight","backgroundSize","justifyContent","margin","TransferContext","createContext","userInfo","backgroundImage","heading","avatarContainer","aspectRatio","details","flexDirection","transferFormContainer","transferForm","entry","label","input","WebkitAppearance","MozAppearance","TRANSFER_URL","classes","useStyles","navigate","useNavigate","_useContext","useContext","AuthContext","auth","_useContext2","setAuth","setTransfer","transfer","_useContext3","LoadingContext","setLoading","loading","_useState","loadingColor","setLoadingColor","useState","_useState2","_slicedToArray","toAccountId","setToAccountId","_useState3","_useState4","amountRupees","setAmountRupees","amountPaise","handleTransfer","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","token","response","transferData","_err$response","_err$response$data","wrap","_context","prev","next","preventDefault","axios","JSON","stringify","headers","Authorization","sent","data","replace","t0","alert","message","stop","_x","apply","arguments","UserInfo","props","name","accountNo","_jsxs","className","children","_jsx","Grid","container","item","xs","md","Avatar","sx","bgcolor","avatarBgcolor","avatarColor","Sender","id","sender","Receiver","receiver","root","type","autoComplete","onChange","newId","parseInt","target","value","newAmount","Button","submitButton","onClick","disabled","length","boxShadow","amount","detailsHeading","fromAccount","toAccount","transferredAt","transferDate","Date","style","maxHeight","toString","okButton","memo","useEffect","Routes","Route","path","element","TransferInitiator","TransferSuccessScreen","StatementContext","header","gridContainer","flexWrap","typeIconContainer","typeIcon","fit","refreshButtonContainer","GET_STATEMENT_URL","_statement$rows$conte","_statement$rows","statement","setStatement","rows","content","columns","field","headerName","headerAlign","align","flex","valueGetter","params","_params$row","row","withdrawalAmount","description","startsWith","renderCell","Tooltip","enterTouchDelay","src","withdrawalIcon","alt","depositIcon","inboundIcon","outboundIcon","_Fragment","getIcon","_params$row2","depositAmount","concat","overflowX","handleRefresh","_err$response$data$me","accountId","balancePaise","DataGrid","disableRowSelectionOnClick","initialState","pagination","paginationModel","pageSize","page","components","Pagination","apiRef","useGridApiContext","useGridSelector","gridPageSelector","count","gridRowCountSelector","rowsPerPage","gridPageSizeSelector","TablePagination","component","variant","shape","rowsPerPageOptions","labelRowsPerPage","onRowsPerPageChange","event","current","setPageSize","setPage","onPageChange","newPage","showFirstButton","showLastButton","providers","Provider","combineComponents","GET_ACCOUNT_URL","handleBannerClick","Banner","useMemo","admin","TitleBar","setBalancePaise","user","balance","popperAnchor","setPopperAnchor","popperOpen","Boolean","popperId","undefined","avatarRef","useRef","popperRef","handleClickOutside","contains","document","addEventListener","removeEventListener","handleAvatarClick","userdata","currentTarget","IconButton","ref","Popper","open","anchorEl","Box","logoutButton","Body","handleStatementFetch","_ref2","_callee2","_context2","_x2","OptionButton","icon","NavLink","to","route","textDecoration","backgroundRepeat","Options","options","transferIcon","accountStatementIcon","TransferScreen","AccountStatement","CustomerConsoleProvider"],"sourceRoot":""}